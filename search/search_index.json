{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041a33421 \u0411\u0430\u0440\u043c\u0438\u043d\u0430 \u0414\u0438\u0430\u043d\u0430","text":""},{"location":"lab1/authorization/","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0443\u0436\u043d\u044b \u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d (\u0432\u0445\u043e\u0434) \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438</p> <pre><code>\n@app.post(\"/register/\")\ndef register(user: UsersRegistration, session=Depends(get_session)):\n    user = Users.model_validate(user)\n    statement = select(Users).where(Users.username == user.username)\n    existing_user = session.exec(statement).first()\n\n    if existing_user:\n        raise HTTPException(status_code=400, detail=\"Username already taken\")\n\n    user.hashed_password = get_password_hash(user.hashed_password)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return {\"status\": 200, \"data\": user}\n\n\n@app.post('/token', response_model=Token)\ndef login_for_token(\n        payload: OAuth2PasswordRequestForm = Depends(),\n        session=Depends(get_session)):\n    username = authenticate_user(payload.username, payload.password, session)\n    if not username:\n        raise HTTPException(status_code=401, detail=\"Incorrect username or password 1\")\n    access_token = create_access_token(data={\"sub\": username})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n@app.post(\"/login/\")\ndef login(user: Users, session=Depends(get_session)):\n    username = authenticate_user(user.username, user.hashed_password, session)\n    if not username:\n        raise HTTPException(status_code=401, detail=\"Incorrect username or password 2\")\n    access_token = create_access_token(data={\"sub\": username})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n</code></pre> <p> </p>"},{"location":"lab1/connection_db/","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b .env, \u043a\u0443\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0430 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0418\u0437 \u043d\u0435\u0433\u043e \u0432 \u0444\u0430\u0439\u043b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u043e\u043b\u044f</p> <pre><code>\nimport os\n\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine\n\n\nload_dotenv()\nDATABASE_URL = os.getenv('DATABASE_URL')\n\nengine = create_engine(DATABASE_URL, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session    \n</code></pre>"},{"location":"lab1/main/","title":"\u0410\u041f\u0418 \u043c\u0435\u0442\u043e\u0434\u044b","text":"<p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438</p> <pre><code>@app.get(\"/users/me/\", response_model=User)\ndef read_users_me(current_user: User = Depends(get_current_user), session=Depends(get_session)):\n    return session.exec(select(Users).where(Users.id == current_user.id)).first()\n\n\n@app.delete(\"/users_me/delete{user_id}\")\ndef user_delete_my_account(user_id: int, current_user: User = Depends(get_current_user), session=Depends(get_session)):\n    if user_id != current_user.id:\n        raise HTTPException(status_code=401, detail=\"You can't delete another user\")\n\n    statement = select(Users).where(Users.id == user_id)\n    results = session.exec(statement)\n    user = results.one()\n    session.delete(user)\n    session.commit()\n\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n@app.get(\"/users/\", response_model=List[UserBase])\ndef read_users(session=Depends(get_session)):\n    users = session.exec(select(Users)).all()\n    return users\n\n\n@app.get(\"/user/{user_id}\", response_model=UserGet)\ndef get_concrete_users(user_id: int,\n                       country: str = None,\n                       city: str = None,\n                       current_user: User = Depends(get_current_user),\n                       session=Depends(get_session)):\n    statement = select(Users).where(Users.id == user_id)\n    if city:\n        statement = statement.where(Users.city == city)\n    if country:\n        statement = statement.where(Users.country == country)\n    user = session.exec(statement).first()\n    return user\n\n</code></pre> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043d\u0438\u0433\u0430\u043c\u0438</p> <pre><code>\n@app.post(\"/post_books/\")\ndef create_book(book: BooksPost, current_user: User = Depends(get_current_user), session=Depends(get_session)):\n    book = Books(title=book.title,\n                 author=book.author,\n                 genre=book.genre,\n                 publisher=book.publisher,\n                 year_of_publication=book.year_of_publication,\n                 description=book.description,\n                 owner_id=current_user.id)\n\n    # book = Books.model_validate(book)\n    session.add(book)\n    session.flush()\n    #session.commit()\n    #session.refresh(book)\n    new_reading = Readings(reader_id=current_user.id,\n                           book_id=book.id,\n                           status=\"available\",\n                           start_date=datetime.date.today(),\n                           end_date=None\n                           )\n    session.add(new_reading)\n    session.commit()\n    session.refresh(book)\n\n    return book\n\n\n@app.get(\"/get_books/\", response_model=List[BooksPost])\ndef read_books(author: Optional[str] = Query(None, title=\"Author\", description=\"Filter books by author\"),\n               status: ReadingStatus = None,\n               genre: Genres = None,\n               session=Depends(get_session)):\n    if status:\n        statement = (\n            select(Books)\n                .join(Books.book_read)\n                .where(Readings.status == status)\n        )\n    else:\n        statement = select(Books)\n    if author:\n        statement = statement.where(Books.author.contains(author))\n    if genre:\n        statement = statement.where(Books.genre == genre)\n\n    books = session.exec(statement).all()\n    return books\n\n\n@app.get(\"/books/{book_id}\", response_model=BooksBase)\ndef get_concrete_book(book_id: int, current_user: User = Depends(get_current_user), session=Depends(get_session)):\n    book = session.exec(select(Books).where(Books.id == book_id)).first()\n    return book\n\n\n@app.get(\"/books/my_library/\", response_model=List[MyBooksBase])\ndef get_my_books(current_user: User = Depends(get_current_user), session=Depends(get_session)):\n    user = session.exec(select(Users).where(Users.username == current_user.username)).first()\n    books = session.exec(select(Books).where(Books.owner_id == user.id)).all()\n    return books\n\n@app.delete(\"/books/delete/{book_id}\")\ndef delete_my_book(book_id: int,\n                   current_user: User = Depends(get_current_user),\n                   session=Depends(get_session)):\n    book = session.exec(select(Books).where(Books.id == book_id)).first()\n    if book.owner_id != current_user.id:\n        raise HTTPException(status_code=401, detail=\"You can't delete book not yours\")\n\n    session.delete(book)\n    session.commit()\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n</code></pre> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433</p> <pre><code>\n@app.post(\"/post_readings/{book_id}/\")\ndef create_reading(book_id: Optional[int], reading: ReadingPost, current_user: User = Depends(get_current_user),\n                   session=Depends(get_session)):\n\n    new_reading = Readings(reader_id=current_user.id,\n                           book_id=book_id,\n                           status=reading.status,\n                           start_date=reading.start_date,\n                           end_date=None\n                           )\n    session.add(new_reading)\n    session.commit()\n    session.refresh(new_reading)\n    return new_reading\n\n\n'''\n@app.get(\"/get_readings/\", response_model=List[ReadingRead])\ndef get_readings(status: ReadingStatus = None,\n                 session=Depends(get_session)):\n    statement = select(Readings)\n    if status:\n        statement = statement.where(Readings.status == status)\n    readings = session.exec(statement).all()\n    return readings\n'''\n\n@app.get(\"/get_my_readings/\", response_model=List[ReadingRead])\ndef get_my_readings(status: ReadingStatus = None,\n                    current_user: User = Depends(get_current_user),\n                    session=Depends(get_session)):\n    statement = select(Readings).where(Readings.reader_id == current_user.id)\n    if status:\n        statement = statement.where(Readings.status == status)\n    readings = session.exec(statement).all()\n    return readings\n\n\n@app.put(\"/readings/{book_id}\", response_model=ReadingRead)\ndef update_reading(book_id: Optional[int],\n                   status: ReadingStatus,\n                   end_date: Optional[date] = None,\n                   current_user: User = Depends(get_current_user),\n                   session: Session = Depends(get_session)):\n\n    reading = session.exec(select(Readings).where(Readings.reader_id == current_user.id,\n                                                  Readings.book_id == book_id)\n                           ).first()\n\n    if not reading:\n        raise HTTPException(status_code=404, detail=\"Reading record not found\")\n\n    # Update the fields if provided\n    if status:\n        reading.status = status\n    if end_date:\n        reading.end_date = end_date\n\n    session.commit()\n    session.refresh(reading)\n\n    return reading\n\n</code></pre> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> <pre><code>\n@app.post(\"/post_request/{book_id}/\")\ndef create_request(book_id: Optional[int],\n                   request: BaseRequest,\n                   current_user: User = Depends(get_current_user),\n                   session=Depends(get_session)):\n\n    reading = session.exec(select(Readings).where(Readings.book_id == book_id,\n                                                  #Readings.end_date is None,\n                                                  Readings.status == \"available\")).first()\n\n    new_request = Requests(sender_id=current_user.id,\n                           receiver_id=reading.reader_id,\n                           book_id=book_id,\n                           status=\"sent\",\n                           conditions=request.conditions,\n                           response=None\n                           )\n    session.add(new_request)\n    session.commit()\n    session.refresh(new_request)\n    return new_request\n\n\n@app.get(\"/get_my_requests/\", response_model=List[GetRequest])\ndef get_my_requests(status: RequestStatus = None,\n                    sent: bool = True,\n                    received: bool = True,\n                    current_user: User = Depends(get_current_user),\n                    session=Depends(get_session)):\n\n    statement = select(Requests)\n    if sent and received:\n        statement = statement.where(\n                    or_(\n                        Requests.sender_id == current_user.id,\n                        Requests.receiver_id == current_user.id\n                    ))\n    elif sent and not received:\n        statement = statement.where(Requests.sender_id == current_user.id)\n    elif received and not sent:\n        statement = statement.where(Requests.receiver_id == current_user.id)\n    if status:\n        statement = statement.where(Requests.status == status)\n    requests = session.exec(statement).all()\n    return requests\n\n\n@app.put(\"/requests/{book_id}\", response_model=UpdateRequest)\ndef update_response(book_id: Optional[int],\n                    status: RequestStatus = \"accepted\",\n                    response: Optional[str] = None,\n                    current_user: User = Depends(get_current_user),\n                    session: Session = Depends(get_session)):\n\n    request = session.exec(select(Requests).where(Requests.receiver_id == current_user.id,\n                                                  Requests.book_id == book_id,\n                                                  Requests.status == \"sent\")\n                           ).first()\n\n    if not request:\n        raise HTTPException(status_code=404, detail=\"Request record not found or status isn't 'sent'\")\n\n    if status:\n        request.status = status\n    if response:\n        request.response = response\n\n    session.commit()\n    session.refresh(response)\n\n    return response\n\n</code></pre> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438</p> <pre><code>\n@app.post(\"/post_review/{book_id}/\")\ndef create_review(book_id: Optional[int],\n                  review: ReviewBase,\n                  current_user: User = Depends(get_current_user),\n                  session=Depends(get_session)):\n\n    if review.rating &lt; 0 or review.rating &gt; 10:\n        raise HTTPException(status_code=404, detail=\"Rating should be in interval [0, 10]\")\n\n    new_review = Review(reviewer_id=current_user.id,\n                        book_id=book_id,\n                        rating=review.rating,\n                        comment=review.comment\n                        )\n    session.add(new_review)\n    session.commit()\n    session.refresh(new_review)\n    return new_review\n\n\n@app.get(\"/books/{book_id}/reviews\", response_model=List[ReviewsGet])\ndef read_reviews_on_book(book_id: int, session=Depends(get_session)):\n    # book = session.exec(select(Books).where(Books.id == book_id)).first()\n    reviews = session.exec(select(Review).where(Review.book_id == book_id))\n    return reviews\n\n</code></pre> <p> </p>"},{"location":"lab1/models/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.</p> <p>Users - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438</p> <pre><code>\nclass Users(SQLModel, table=True):\n\n    id: Optional[int] = Field(default=None, primary_key=True)\n    username: str = Field(unique=True)\n    hashed_password: str\n    name: str\n    surname: str\n    email: str\n    country: str\n    city: str\n\n    book_ownership: List[\"Books\"] = Relationship(sa_relationship_kwargs={\"cascade\": \"delete\"}, back_populates=\"owner\")\n\n    reader: List[\"Books\"] = Relationship(back_populates=\"in_readings\", link_model=Readings)\n    readings: List[\"Readings\"] = Relationship(sa_relationship_kwargs={\"cascade\": \"delete\"}, back_populates=\"reader\")\n\n    reviews: List[\"Review\"] = Relationship(back_populates=\"reviewer\")\n\n    __table_args__ = {\"extend_existing\": True}\n\n</code></pre> <p>Books - \u043a\u043d\u0438\u0433\u0438</p> <pre><code>\nclass Books(SQLModel, table=True):\n\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    author: str\n    genre: Genres\n    publisher: str\n    year_of_publication: int\n    description: str\n\n    owner_id: Optional[int] = Field(default=None, foreign_key=\"users.id\")\n    owner: Optional[Users] = Relationship(back_populates=\"book_ownership\")\n\n    in_readings: List[\"Users\"] = Relationship(back_populates=\"reader\", link_model=Readings)\n    book_read: List[\"Readings\"] = Relationship(sa_relationship_kwargs={\"cascade\": \"delete\"}, back_populates=\"book\")\n\n    reviews: List[\"Review\"] = Relationship(sa_relationship_kwargs={\"cascade\": \"delete\"}, back_populates=\"book\")\n    book_request: List[\"Requests\"] = Relationship(back_populates=\"book\")\n\n    __table_args__ = {\"extend_existing\": True}\n\n</code></pre> <p>Readings - \u0432\u043b\u0435\u0434\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u043e\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f</p> <pre><code>\nclass Readings(SQLModel, table=True):\n    reader_id: Optional[int] = Field(default=None, foreign_key=\"users.id\", primary_key=True)\n    book_id: Optional[int] = Field(default=None, foreign_key=\"books.id\", primary_key=True)\n    status: ReadingStatus\n    start_date: date = Field(default=date.today)\n    end_date: date = Field(nullable=True)\n\n    reader: Optional[\"Users\"] = Relationship(back_populates=\"readings\")\n    book: Optional[\"Books\"] = Relationship(back_populates=\"book_read\")\n\n</code></pre> <p>Requests - \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> <pre><code>\nclass Requests(SQLModel, table=True):\n    receiver_id: Optional[int] = Field(default=None, foreign_key=\"users.id\", primary_key=True)\n    sender_id: Optional[int] = Field(default=None, foreign_key=\"users.id\", primary_key=True)\n    book_id: Optional[int] = Field(default=None, foreign_key=\"books.id\", primary_key=True)\n    conditions: Optional[str]\n    response: Optional[str] = None\n    status: RequestStatus\n    #sender: Optional[Users] = Relationship(back_populates=\"exchange_requests_sent\", link_model=Users)\n    sender: Optional[Users] = Relationship(sa_relationship_kwargs=dict(foreign_keys=\"[Requests.sender_id]\"))\n    #recipient: Optional[Users] = Relationship(back_populates=\"exchange_requests_received\", link_model=Users)\n    recipient: Optional[Users] = Relationship(sa_relationship_kwargs=dict(foreign_keys=\"[Requests.receiver_id]\"))\n    book: Optional[Books] = Relationship(back_populates=\"book_request\")\n\n\n</code></pre> <p>Reviews - \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0430 \u043a\u043d\u0438\u0433\u0438</p> <pre><code>\nclass Review(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    book_id: int = Field(foreign_key=\"books.id\")\n    reviewer_id: int = Field(foreign_key=\"users.id\")\n    rating: int  # Assuming a rating scale of 1-5\n    comment: Optional[str] = None\n\n    book: Optional[Books] = Relationship(back_populates=\"reviews\")\n    reviewer: Optional[Users] = Relationship(back_populates=\"reviews\")\n\n    __table_args__ = {\"extend_existing\": True}\n\n\n</code></pre> <p>\u0416\u0430\u043d\u0440\u044b \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446</p> <pre><code>\nclass Genres(Enum):\n    fantasy = \"fantasy\"\n    detectives = \"detectives\"\n    romance = \"romance\"\n    thrillers = \"thrillers\"\n    horrors = \"horrors\"\n    comics = \"comics\"\n    adventures = \"adventures\"\n    poetry = \"poetry\"\n    other = \"other\"\n\n\nclass ReadingStatus(Enum):\n    exchanged = \"exchanged\"\n    in_process = \"in_process\"\n    available = \"available\"\n\n\nclass RequestStatus(Enum):\n    sent = \"sent\"\n    accepted = \"accepted\"\n    rejected = \"rejected\"\n\n</code></pre>"},{"location":"lab1/pydantic_models/","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 p\u0443dantic \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0445\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439</p> <p>Users - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438</p> <pre><code>\nclass UserBase(BaseModel):\n    name: str\n    surname: str\n    email: str\n    country: str\n    city: str\n\n\nclass UsersRegistration(UserBase):\n    username: str\n    hashed_password: str\n\n\nclass UserGet(UserBase):\n\n    book_ownership: List[\"Books\"] = []\n    reader: List[\"Books\"] = []\n\n    class Config:\n        orm_mode = True\n\n\nclass User(UsersRegistration):\n    id: Optional[int]\n    book_ownership: List[\"BooksPost\"] = []\n    reader: List[\"BooksPost\"] = []\n    reviews: List[\"ReviewsGet\"] = []\n\n    class Config:\n        orm_mode = True\n\n</code></pre> <p>Books - \u043a\u043d\u0438\u0433\u0438</p> <pre><code>\nclass BooksPost(BaseModel):\n    title: str\n    author: str\n    genre: Genres\n    publisher: str\n    year_of_publication: int\n    description: str\n\n\nclass MyBooksBase(BooksPost):\n    id: Optional[int]\n    reviews: List[\"Review\"] = []\n\n    class Config:\n        orm_mode = True\n\n\nclass BooksBase(MyBooksBase):\n    owner: UserBase\n    book_read: List[\"ReadingRead\"] = []\n\n    class Config:\n        orm_mode = True\n\n</code></pre> <p>Readings - \u0432\u043b\u0435\u0434\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u043e\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f</p> <pre><code>\nclass ReadingRead(BaseModel):\n\n    reader: UserBase\n    book: BooksPost\n    status: ReadingStatus\n    start_date: date\n    end_date: Optional[date] = None\n\n    class Config:\n        orm_mode = True\n\n\nclass ReadingPost(BaseModel):\n\n    status: ReadingStatus\n    start_date: date\n</code></pre> <p>Requests - \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d</p> <pre><code>\nclass BaseRequest(BaseModel):\n\n    conditions: Optional[str]\n\n\nclass UpdateRequest(BaseRequest):\n\n    status: RequestStatus\n    response: Optional[str]\n\n\nclass GetRequest(UpdateRequest):\n\n    book: Optional[Books]\n    sender: Optional[Users]\n    recipient: Optional[Users]\n\n    class Config:\n        orm_mode = True\n\n</code></pre> <p>Reviews - \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0430 \u043a\u043d\u0438\u0433\u0438</p> <pre><code>\nclass ReviewBase(BaseModel):\n\n    rating: int\n    comment: Optional[str] = None\n\n\nclass ReviewsGet(ReviewBase):\n    id: Optional[int]\n    book: \"BooksPost\"#Optional[Books]\n    reviewer: UserBase#Optional[Users]\n\n    class Config:\n        orm_mode = True\n\n</code></pre>"}]}